//AUTHOR: Stephen A. Prine
//COURSE: CPT187
/*PURPOSE: This part is the current Inventory thats available. It takes the current inventory and sorts them using a 
 * Identification numbers and lets you search for items. As user/customers purchase items, it reduces the in stock availability.
 * Once a user has finished with purchasing. It then takes all the items and sorts them for the final report at end of program. 
 * 
 */
//START DATE: 2/16/22

package edu.cpt187.prine.exercise6;


import java.io.FileInputStream;
import java.io.IOException;
import java.util.Random;
import java.util.Scanner;

//Start Inventory Class
public class Inventory 
{
	//declare and initialize class attributes
	private final String[] DISCOUNT_NAMES = {"Member", "Senior", "New Customer", "No discount"};
	private final double[] DISCOUNT_RATES = {0.15, 0.25, 0.2, 0};
	private final String[] PRIZE_NAMES = {"New Couch", "New Car", "Week Vacation"};
	private final int MAX_RECORDS = 35;
	private final int NOT_FOUND = -1;
	private final int ONE = 1;
	private final int RESET_VALUE = 0;
	private int[] itemIDs = new int[MAX_RECORDS];
	private String[] itemNames = new String[MAX_RECORDS];
	private double[] itemPrices = new double[MAX_RECORDS];
	private int[] orderQuantities = new int[MAX_RECORDS];
	private double[] orderTotals = new double[MAX_RECORDS];
	private int[]inStockCounts = new int[MAX_RECORDS];
	private int itemSearchIndex =0;
	private int recordCount = 0;
	private Random prizeGenerator = new Random();

	//constructor

	//default constructor
	public Inventory()
	{
	}//END of default constructor

	//SETTERS

	//assigns reduce stock
	public void setReduceStock(int borrowedHowMany)
	{
		inStockCounts[itemSearchIndex] = (inStockCounts[itemSearchIndex] - borrowedHowMany);
	}//End setter setReduceStock

	//assigns load items 
	public void setLoadItems(String borrowedFileName)
	{  
		//try block
		try 
		{
			recordCount = RESET_VALUE;

			//create instance from scanner using instantiation statement
			Scanner infile = new Scanner (new FileInputStream(borrowedFileName));

			//repetition structure to process records
			while (infile.hasNext() == true && recordCount < MAX_RECORDS)
			{ 
				itemIDs[recordCount] = infile.nextInt();
				itemNames[recordCount] = infile.next();
				itemPrices[recordCount] = infile.nextDouble();
				inStockCounts[recordCount] = infile.nextInt();
				recordCount++;
			}//End while for infile.hasNext
			//close scanner
			infile.close();
			//invoke bubbleSort
			setBubbleSort();
		} //end try
		//catch block
		catch (IOException ex)
		{
			recordCount = NOT_FOUND;
		}//End of catch block
	}//End setter setLoadItems

	//Start setter setLoadItems : OverLoaded
	public void setLoadItems(String borrowedFileName, int borrowedSize)
	{
		//try block
		try 
		{
			recordCount = RESET_VALUE;

			//create instance from scanner using instantiation statement
			Scanner infile = new Scanner (new FileInputStream(borrowedFileName));

			//repetition structure to process records
			while (infile.hasNext() == true && recordCount < MAX_RECORDS && recordCount < borrowedSize)
			{ 
				itemIDs[recordCount] = infile.nextInt();
				itemNames[recordCount] = infile.next();
				itemPrices[recordCount] = infile.nextDouble();
				orderQuantities[recordCount] = infile.nextInt();
				orderTotals[recordCount] = infile.nextDouble();					
				recordCount++;
			}//End while for infile.hasNext
			//close scanner
			infile.close();
			//invoke bubble sort
			setBubbleSort();
		} // end try
		//catch block
		catch (IOException ex)
		{
			recordCount = NOT_FOUND;
		}//END of catch block
	}//End setter setLoadItems : OverLoaded


	//invokes the search behavior and assigns results to itemSearchIndex
	public void setSearchIndex(int borrowedID)
	{
		itemSearchIndex = getBinSearch(borrowedID);
	}//End setter setSearchIndex

	//executes bubble sort logic
	public void setBubbleSort()
	{
		//declare and initialize local variables
		int localLast = (recordCount - ONE);
		//while loop
		while (localLast > RESET_VALUE)
		{
			int localIndex = RESET_VALUE;
			boolean localSwap = false;
			//Start while localIndex < localLast
			while (localIndex < localLast)
			{
				//if selection
				if (itemIDs[localIndex] > itemIDs[localIndex + ONE])
				{
					setSwapArrayElements(localIndex);
					localSwap = true;
				}//End of if selection
				//incrementLCV
				localIndex++;
			}//end of while localIndex < localLast
			//Start if localSwap == false
			if (localSwap == false)
			{
				localLast = RESET_VALUE;
			}//end if localSwap == false
			//Start else localSwap == true
			else
			{
				localLast--;
			}//End of else localSwap == true
		}//End while while localIndex < localLast
	}//End setter setBubbleSort

	//swaps array elements
	public void setSwapArrayElements(int borrowedIndex)
	{
		//declare and initialize local variables
		int localItemIDs = 0;
		String localItemNames = "";
		double localItemPrices = 0.0;
		int localInStockCounts = 0;
		int localOrderQuantities = 0;
		double localOrderTotals = 0.0;

		//swap itemIDs 
		localItemIDs = itemIDs[borrowedIndex];
		itemIDs[borrowedIndex] = itemIDs[borrowedIndex + ONE];
		itemIDs[borrowedIndex + ONE] = localItemIDs;

		//swap itemNames
		localItemNames = itemNames[borrowedIndex];
		itemNames[borrowedIndex] = itemNames[borrowedIndex + ONE];
		itemNames[borrowedIndex + ONE] = localItemNames;

		//swap itemPrices
		localItemPrices = itemPrices[borrowedIndex];
		itemPrices[borrowedIndex] = itemPrices[borrowedIndex + ONE];
		itemPrices[borrowedIndex + ONE] = localItemPrices;

		//swap inStockCounts
		localInStockCounts = inStockCounts[borrowedIndex];
		inStockCounts[borrowedIndex] = inStockCounts[borrowedIndex + ONE];
		inStockCounts[borrowedIndex + ONE] = localInStockCounts;

		//swap order quantities
		localOrderQuantities = orderQuantities[borrowedIndex];
		orderQuantities[borrowedIndex] = orderQuantities[borrowedIndex + ONE];
		orderQuantities[borrowedIndex + ONE] = localOrderQuantities;

		//swap order totals
		localOrderTotals= orderTotals[borrowedIndex];
		orderTotals[borrowedIndex] = orderTotals[borrowedIndex + ONE];
		orderTotals[borrowedIndex + ONE] = localOrderTotals;
	}//End setter setSwapArrayElements

	//GETTERS

	//gets binSearch
	public int getBinSearch(int borrowedBorrowedID)
	{
		//declare and initialize local variables
		int localFirst = 0;
		int localMid = 0;
		boolean localFound = false;
		int localLast = (recordCount - ONE);
		final int TWO = 2;

		//Start while localFirst <= localLast && localFound == false
		while (localFirst <= localLast && localFound == false)
		{
			localMid = (localFirst + localLast)/ TWO;
			//Start if itemIDs[localMid] == borrowedBorrowedID
			if (itemIDs[localMid] == borrowedBorrowedID)
			{
				localFound = true;
			}//end itemIDs[localMid] == borrowedBorrowedID
			//Start else if itemIDs[localMid] < borrowedBorrowedID
			else if (itemIDs[localMid] < borrowedBorrowedID)
			{
				localFirst = localMid + ONE;
			}//End else if itemIDs[localMid] < borrowedBorrowedID
			//Start else localLast = localMid - ONE
			else
			{
				localLast = localMid - ONE;
			}//End else localLast = localMid - ONE
		}//End while localFirst <= localLast && localFound == false
		//Start if localSelection == false
		if (localFound == false)
		{
			localMid = NOT_FOUND;
		}//End if localSelection == false 
		return localMid;
	}//End getter getBinSearch

	//gets in stock counts
	public int[] getInStockCounts()
	{
		return inStockCounts;
	}//End getter getInStockCounts

	//gets itemIDs
	public int[] getItemIDs()
	{
		return itemIDs;
	}//End getter getItemIDs

	//gets item names
	public String[] getItemNames()
	{
		return itemNames;
	}//End getter getItemNames

	//gets item prices
	public double[] getItemPrices()
	{
		return itemPrices;
	}//End getter getItemPrices

	//gets discount names
	public String[] getDiscountNames()
	{
		return DISCOUNT_NAMES;
	}//End getter getDiscountName

	//gets discount rates
	public double[] getDiscountRates()
	{
		return DISCOUNT_RATES;
	}//End getter getDiscountRates

	//gets order quantities
	public int[] getOrderQuantities()
	{
		return orderQuantities;
	}//End getter getOrderQuantities

	//gets order totals
	public double[] getOrderTotals()
	{
		return orderTotals;
	}//End getter getOrderTotals

	//gets prize names
	public String[] getPrizeNames()
	{
		return PRIZE_NAMES;
	}//End getter getPrizeNames

	//gets random number
	public int getRandomNumber()
	{
		return prizeGenerator.nextInt(PRIZE_NAMES.length);
	}//End getter getRandomNumber

	//gets max records
	public int getMaxRecords()
	{
		return MAX_RECORDS;
	}//End getter getMaxRecords

	//gets item search index
	public int getItemSearchIndex()
	{
		return itemSearchIndex;
	}//End getter getItemSearchIndex

	//gets record count
	public int getRecordCount()
	{
		return recordCount;
	}//End getter getRecordCount

	public double getGrandTotal()
	{
		//Declare and initialize local variables
		int localIndex = 0;
		double localGrandTotal = 0.0;
		//Start while localIndex < recordCount
		while(localIndex < recordCount)
		{
			localGrandTotal = localGrandTotal + orderTotals[localIndex];
			localIndex++;
		}
		return localGrandTotal;
	}//End getter for getGrandTotal

}//End of Inventory class
