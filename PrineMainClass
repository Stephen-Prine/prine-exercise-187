//AUTHOR: Stephen A. Prine
//COURSE: CPT187
/*PURPOSE: The purpose of this program is to make a account for a customer if they don't already have one.
 * it then lets them purchase items through a inventory list through identification numbers. It will then tell the customer
 * if its in stock and let them choose how many. If they apply for a discount it will apply it and give a total
 * order cost detail report per item. when user is finished it'll give them a full order of everything they purchase, and a total cost. 
 * in a Final Report 
 */
//START DATE: 2/16/22

package edu.cpt187.prine.exercise6;

import java.util.Scanner;

//Start Main class
public class MainClass 
{
	//declare and initialize all class constants
	public static final char[] MENU_CHARS = {'A', 'B', 'Q'};
	public static final String[] MENU_OPTIONS = {"Login","Create an Account", "Quit"};
	public static final char[] FILE_MENU_CHARS = {'A', 'B', 'R'};
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventory", "Create Order", "Return to Main Menu"};
	public static final char[] SUB_MENU_CHARS = {'A', 'B', 'C', 'D'};
	public static final String INVENTORY_FILE_NAME = "MasterInventoryFile.dat";
	public static final String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";

	//Start Main method
	public static void main(String[] args) 
	{

		//instantiation statement
		Inventory currentInventory = new Inventory();
		Order currentOrder = new Order();
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);

		//declare and initialize scanner
		Scanner input = new Scanner(System.in);

		//declare and initialize all local variables
		String userName = "";
		char menuSelection = ' ';

		//display welcome banner
		displayWelcomeBanner();

		//prime read
		menuSelection = validateMenuSelection(input);

		//Start while quit is not selected
		while (menuSelection != 'Q')
		{
			currentUser.setUserAccountArrays();
			userName = getUserName(input);
			//Start if menu selection != 'A'
			if (menuSelection != 'A')
			{
				currentUser.setSearchedIndex(userName);
				//Start if getSearchedIndex >= 0
				if (currentUser.getSearchedIndex() >= 0)
				{
					displayAccountResults(userName);
				}//end if getSearchedIndex >= 0
				//Start else searchedIndex < 0
				else
				{
					currentUser.setWriteOneRecord(userName, getPassword(input));
					displayAccountResults();
				}//End else searchedIndex < 0
			}//End if menuSelection != 'A'
			//Start else menuSelection does = 'A'
			else 
			{
				currentUser.setSearchedIndex(userName, getPassword(input));
				//Start if searchedIndex < 0
				if (currentUser.getSearchedIndex() < 0)
				{
					displayLoginError();
				}//End if searchedIndex < 0
				//Start else searchedIndex > 0
				else
				{
					menuSelection = validateFileSelection(input);
					//end of else selection for searchedIndex > 0        
					//Start while loop for menuSelection != 'R'
					while (menuSelection != 'R')
					{
						//Start if selection == 'A'
						if(menuSelection == 'A')
						{
							currentInventory.setLoadItems(getFileName(input));
							//Start if recordCount <=0
							if (currentInventory.getRecordCount() <= 0)
							{
								//file error
								displayFileError();
							}//End if recordCount <= 0
							//Start else recordCount > 0
							else
							{
								//record report is displayed
								displayRecordReport(currentInventory.getRecordCount());
							}//End else recordCount > 0
						}//End of if menu Selection == 'A'

						//Start else menuSelection != 'A'
						else
						{
							currentInventory.setSearchIndex(validateSearchValue(input));

							//Start if searchIndex < 0
							if (currentInventory.getItemSearchIndex() < 0)
							{
								//not found
								displayNotFound();
							}//End if searchIndex < 0
							//Start else searchIndex > 0
							else
							{
								currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());
								currentOrder.setItemID(currentInventory.getItemIDs());
								currentOrder.setItemPrice(currentInventory.getItemPrices());
								currentOrder.setItemName(currentInventory.getItemNames());
								currentOrder.setHowMany(validateHowMany(input));

								//Start if inStockCounts < howMany
								if (currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany())
								{
									//out of stock
									displayOutOfStock();
								}//End if inStockCounts < howMany
								//Start else in stock
								else
								{
									currentOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(),currentInventory.getDiscountRates()));
									currentOrder.setDiscountName(currentInventory.getDiscountNames());
									currentOrder.setDiscountRate(currentInventory.getDiscountRates());
									currentOrder.setDecreaseInStock(currentInventory);
									currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());
									orders.setWriteOrder(currentOrder.getItemID(), currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getTotalCost());

									//Start if discountRate is > 0.0
									if (currentOrder.getDiscountRate() > 0.0)
									{
										//display order report
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getDiscountName(), currentOrder.getDiscountRate(),
												currentOrder.getDiscountAmt(), currentOrder.getDiscountPrice(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(),
												currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//End if discountRate is > 0.0
									//Start else discountRate < 0.0
									else
									{
										//display order report
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(),
												currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//End else discount rate < 0.0
								}//End else in stock
							}//End else search index > 0
						}//end of menuSelection != 'A'
						//validate file selection
						menuSelection = validateFileSelection(input);
					}//End of searchIndex > 0
				}//End while menuSelection != 'R'
			}//End else selection for searchedIndex > 0
			//validate menu selection
			menuSelection = validateMenuSelection(input);
		}//End of while selection != 'Q' 

		currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());
		//Start if recordCount > 0
		if (orders.getRecordCount() > 0)
		{
			//display the final report
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(), currentInventory.getItemPrices(), currentInventory.getOrderQuantities(),
					currentInventory.getOrderTotals(), currentInventory.getRecordCount(), currentInventory.getGrandTotal());
		}//End if record count is > 0

		//display farewell message
		displayFarewellMessage();

		//close scanner
		input.close();
	}//END of main method

	//void methods

	//Start void method displayWelcomeBanner 
	public static void displayWelcomeBanner()
	{
		//Display welcome banner
		System.out.println("***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ");
		System.out.println("Welcome to the Ordering Program! This program");
		System.out.println("will let you make an account and start purchasing everthing");
		System.out.println("in the inventory we have in stock. Discounts ");
		System.out.println("will be subtracted from your total, if applicable.");
		System.out.println("You will, also, qualify for a prize!");
		System.out.println("***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ");
	}//End void method displayWelcomeBanner 

	//Start void method displayFarewellMessage
	public static void displayFarewellMessage()
	{
		//Display Farewell message
		System.out.println("Thank you for using the Ordering Program! ");
		System.out.println("Have a wonderful day!");
	}//End void method displayFarewellMessage

	//Start void method displayMainMenu
	public static void displayMainMenu()
	{
		//declare and initialize local variables
		int localIndex = 0;
		//menu title
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("MAIN MENU");

		//while loop
		while (localIndex < MENU_OPTIONS.length)
		{
			//display menu- char options
			System.out.printf("%-1s%1s%1s%1s%1s\n", "[",MENU_CHARS[localIndex],"] ", " for ", MENU_OPTIONS[localIndex]);
			//increment LCV
			localIndex++;
		}//END of while loop

		//menu prompt
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your selection here: ");
	}//End void method displayMainMenu

	//Start void method displayDiscountMenu
	public static void displayDiscountMenu(String[] borrowedDiscountName, double[] borrowedDiscountRates)
	{
		//declare and initialize local variables
		int localIndex = 0;
		//menu title
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("DISCOUNT MENU");

		//while loop
		while (localIndex < borrowedDiscountName.length)
		{
			//display menu - char options
			System.out.printf("%-1s%1s%1s%-13s%13.1f%1s\n", "[", SUB_MENU_CHARS[localIndex], "] for ", borrowedDiscountName[localIndex], borrowedDiscountRates[localIndex] * 100, "%" );
			//increment LCV
			localIndex++;
		}//END of while loop

		//menu prompt
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Please make your selection here: ");
	}//End void method displayDiscountMenu

	//Start void method displayFileMenu
	public static void displayFileMenu()
	{
		//declare and initialize local variables
		int localIndex = 0;
		//menu title
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE MENU");

		//while loop
		while (localIndex < FILE_MENU_OPTIONS.length)
		{
			//display menu- char options
			System.out.printf("%-1s%1s%1s%1s%1s\n", "[",FILE_MENU_CHARS[localIndex],"] ", " for ", FILE_MENU_OPTIONS[localIndex]);
			//increment LCV
			localIndex++;
		}//END of while loop

		//menu prompt
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your selection here: ");
	}//End void method displayFileMenu

	//Start void Method displayAccountResults
	public static void displayAccountResults()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("New account created");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End void Method displayAccountResults

	//Start display account results : OVERLOADED
	public static void displayAccountResults(String userName)
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("Account not created: username, " + userName + ", already exists");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End display account results : OVERLOADED

	//Start void method displayLoginError
	public static void displayLoginError()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("LOGIN ERROR");
		System.out.println("Username and/or Password is incorrect");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End void method displayLoginError

	//Start void method displayFileError
	public static void displayFileError()
	{
		//Display  message
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE ERROR");
		System.out.println("The file named was not found or could not be opened");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End void method displayFileError

	//Start void method displayRecordReport
	public static void displayRecordReport(int recordCount)
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("RECORD REPORT");
		System.out.print("" + recordCount + " records processed\n");			
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End void method displayRecordReport

	//Start void method displayNotFound
	public static void displayNotFound()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("NOT FOUND ERROR");
		System.out.println("The search value entered was not found");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End void method displayNotFound

	//Start void method displayOutOfStock
	public static void displayOutOfStock()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("OUT OF STOCK ERROR");
		System.out.println("The quantity entered is greater than the quantity in-stock");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End void method displayOutOfStock

	//Start void method for displayOrderReport
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt, 
			double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.printf("%-23s%-19s\n\n", "Customer Name:" , borrowedUserName);
		System.out.printf("%-23s%-19s\n", "Item Name:" , borrowedItemName);
		System.out.printf("%-23s%-3s%16.2f\n\n", "Item Price:" , "$" , borrowedItemPrice);
		System.out.printf("%-23s%-14s\n", "Discount Name:" , borrowedDiscountName);
		System.out.printf("%-26s%15.1f%4s\n", "Discount Rate:" , borrowedDiscountRate * 100 , "%");
		System.out.printf("%-23s%-3s%16.2f\n", "Discount Amount:" , "$" , borrowedDiscountAmt);
		System.out.printf("%-23s%-3s%16.2f\n\n", "Discount Price:" , "$" , borrowedDiscountPrice);
		System.out.printf("%-26s%16d\n\n", "Quantity:" , borrowedHowMany);
		System.out.printf("%-23s%-3s%16.2f\n\n", "Subtotal:" , "$" , borrowedSubTotal);
		System.out.printf("%-26s%15.1f%4s\n", "Tax Rate:" , borrowedTaxRate * 100, "%");
		System.out.printf("%-23s%-3s%16.2f\n\n", "Tax Amount:" , "$" , borrowedTaxAmt);
		System.out.printf("%-23s%-3s%16.2f\n\n", "Order Total:" , "$" , borrowedTotalCost);
		System.out.printf("%-23s%-14s\n\n", "Prize:" , borrowedPrizeName);
		System.out.printf("%-20s%-2d%-10s\n", "Buy more now: Only" , borrowedInStockCount , " left in stock!");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
	}//End void method for displayDiscountReport

	//OVERLOADED display order report VOID method
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName,double borrowedItemPrice, int borrowedHowMany,
			double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.printf("%-23s%-19s\n\n", "Customer Name:" , borrowedUserName);
		System.out.printf("%-23s%-19s\n", "Item Name:" , borrowedItemName);
		System.out.printf("%-23s%-3s%16.2f\n\n", "Item Price:" , "$" , borrowedItemPrice);
		System.out.printf("%-26s%16d\n\n", "Quantity:" , borrowedHowMany);
		System.out.printf("%-23s%-3s%16.2f\n\n", "Subtotal:" , "$" , borrowedSubTotal);
		System.out.printf("%-26s%15.1f%4s\n", "Tax Rate:" , borrowedTaxRate * 100 , "%");
		System.out.printf("%-23s%-3s%16.2f\n\n", "Tax Amount:" , "$" , borrowedTaxAmt);
		System.out.printf("%-23s%-3s%16.2f\n\n", "Order Total:" , "$" , borrowedTotalCost);
		System.out.printf("%-23s%-14s\n", "Prize:" , borrowedPrizeName);
		System.out.printf("%-20s%-2d%-10s\n", "Buy more now: Only" , borrowedInStockCount , " left in stock!");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
	}//END of OVERLOADED display order report VOID method

	//Start void method displayFinalReport
	public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemNames, double[] borrowedItemPrices,
			int[] borrowedOrderQuantities, double[] borrowedOrderTotals,int borrowedRecordCount, double borrowedGrandTotal)

	{
		//declare local Variable
		int localIndex = 0;

		//display final report
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.println("FINAL REPORT ");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.printf("%2s%10s%22s%10s%10s\n", "ID", "NAME", "PRICE", "QTY", "TOTAL");
		//Start while for 
		while(localIndex < borrowedRecordCount)
		{
			System.out.printf("%-6s%-23s%5.2f%9d%12.2f\n", borrowedItemIDs[localIndex], borrowedItemNames[localIndex], borrowedItemPrices[localIndex], borrowedOrderQuantities[localIndex], borrowedOrderTotals[localIndex]);
			localIndex++;
		}
		System.out.printf("\n%1s", "GRAND TOTAL\n");
		System.out.printf("%1s%5.2f\n", "$", borrowedGrandTotal);
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
	}//END void method displayFinalReport	

	//VR METHODS

	//Start VR method to get the user name
	public static String getUserName(Scanner borrowedInput)
	{
		String localUserName = "";
		//prime read
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your username: ");
		localUserName = borrowedInput.next();
		return localUserName;
	}//End of VR method for user name

	//Start VR method to get the user name
	public static String getPassword(Scanner borrowedInput)
	{
		String localPassword = "";
		//prime read
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your password: ");
		localPassword = borrowedInput.next();
		return localPassword;
	}//End of VR method for user name

	//Start VR method to get file name 
	public static String getFileName(Scanner borrowedInput)
	{ 
		String localFileName = "";
		//prime read
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter the file name with extension (i.e.file.txt): ");
		localFileName = borrowedInput.next();
		return localFileName;
	}//End of VR method to get file name

	//Start VR method to get validation for main menu
	public static char validateMenuSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';
		//prime read
		displayMainMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//validation loop
		while (localSelection != MENU_CHARS[0] && localSelection != MENU_CHARS[1] && localSelection != MENU_CHARS[2])
		{
			//error message
			System.out.println("~~ERROR: Invalid Selection.~~");
			//update read
			displayMainMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END of validation loop
		return localSelection;
	}//End VR method validation for main menu 

	//Start VR method for validation for file menu
	public static char validateFileSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';
		//prime read
		displayFileMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//validation loop
		while (localSelection != FILE_MENU_CHARS[0] && localSelection != FILE_MENU_CHARS[1] && localSelection != FILE_MENU_CHARS[2])
		{
			//error message
			System.out.println("~~ERROR: Invalid Selection.~~");
			//update read
			displayFileMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END of validation loop
		return localSelection;
	}//End VR method for validation for file menu

	//Start VR method for validation for discount menu
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, 
			double[] borrowedDiscountRates)
	{
		char localSelection = ' ';
		//prime read
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		//validation loop
		while (localSelection != SUB_MENU_CHARS[0] && localSelection != SUB_MENU_CHARS[1] &&
				localSelection != SUB_MENU_CHARS[2] && localSelection != SUB_MENU_CHARS[3])
		{
			//error message
			System.out.println("~~ERROR: Invalid Selection.~~");
			//update read
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END of validation loop
		return localSelection;
	}//End VR method for validation for discount menu

	//Start VR method to validate how many
	public static String validateHowMany(Scanner borrowedInput)
	{
		String localHowMany = "";
		System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("\nPlease enter a quantity: ");
		localHowMany = borrowedInput.next();

		//validation loop
		while (Integer.parseInt(localHowMany) <= 0)
		{
			//error message
			System.out.println("~~ERROR: Invalid quantity.~~");
			//update read
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.print("Please enter a quantity: ");
			localHowMany = borrowedInput.next();
		}//END of validation loop
		return localHowMany;
	}//End VR method to validate how many

	//Start VR method validation for search value
	public static int validateSearchValue(Scanner borrowedInput)
	{
		int localSearchValue = 0;
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter the search value: ");
		localSearchValue = borrowedInput.nextInt();

		//validation loop
		while (localSearchValue < 0)
		{
			//error message
			System.out.println("~~ERROR: Invalid value.~~");
			//update read
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.print("Enter the search value: ");
			localSearchValue = borrowedInput.nextInt();
		}//End VR method validation for search value
		return localSearchValue;
	}//END of search value validation

}//end of main class
